paths:
  /alerts:
    get:
      operationId: listAlerts
      tags:
        - Alerts
      summary: List all alerts
      parameters:
        - name: type
          in: query
          schema:
            type: string
            enum: [ LOST, SEEN ]
        - name: status
          in: query
          schema:
            type: string
            enum: [ ACTIVE, RESOLVED ]
        - name: countryCode
          in: query
          schema:
            type: integer
        - name: postalCode
          in: query
          schema:
            type: string
        - name: page
          in: query
          description: Page number (zero-based)
          required: false
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: size
          in: query
          description: Number of results per page
          required: false
          schema:
            type: integer
            minimum: 1
            default: 20
        - name: sort
          in: query
          description: Sorting criteria in the format `property,(asc|desc)`. You can specify multiple sort parameters.
          required: false
          schema:
            type: array
            items:
              type: string
            example:
              - createdAt,desc
      responses:
        '200':
          description: List of alerts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Alert'
    post:
      operationId: createAlert
      tags:
        - Alerts
      summary: Create a new alert
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAlertRequest'
      responses:
        '201':
          description: Alert created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateAlertResponse'
  /alerts/{id}:
    get:
      operationId: getAlertById
      tags:
        - Alerts
      summary: Get an alert by ID
      parameters:
        - $ref: '#/components/parameters/AlertId'
      responses:
        '200':
          description: Alert found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Alert'
    put:
      operationId: updateAlert
      tags:
        - Alerts
      summary: Update an alert
      parameters:
        - $ref: '#/components/parameters/AlertId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Alert'
      responses:
        '200':
          description: Alert updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Alert'
    delete:
      operationId: deleteAlert
      tags:
        - Alerts
      summary: Delete an alert
      parameters:
        - $ref: '#/components/parameters/AlertId'
      responses:
        '204':
          description: Alert deleted
  
  /alerts/nearby:
    get:
      operationId: getAlertsNearby
      tags:
        - Alerts
      summary: Find alerts within a specific radius from given coordinates
      parameters:
        - name: lat
          in: query
          required: true
          description: Latitude of the center point
          schema:
            type: number
            format: double
            minimum: -90
            maximum: 90
        - name: lng
          in: query
          required: true
          description: Longitude of the center point
          schema:
            type: number
            format: double
            minimum: -180
            maximum: 180
        - name: radius
          in: query
          required: false
          description: Search radius in kilometers
          schema:
            type: number
            format: double
            minimum: 0.1
            maximum: 100
            default: 10.0
        - name: type
          in: query
          required: false
          description: Filter by alert type
          schema:
            type: string
            enum: [LOST, SEEN]
      responses:
        '200':
          description: List of alerts within the specified radius
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AlertResponse'
        '400':
          description: Invalid coordinates or radius
          
  /alerts/{id}/photos:
    post:
      operationId: addPhotosToAlert
      tags:
        - Photos
      parameters:
        - $ref: '#/components/parameters/AlertId'
      summary: Add photos to an alert
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                photoFilenames:
                  $ref: '#/components/schemas/PhotoFileNames'
      responses:
        '201':
          description: Photos added
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PhotoUrl'
  /alerts/{id}/photos/{s3ObjectKey}:
    delete:
      operationId: deletePhotoFromAlert
      tags:
        - Photos
      summary: Delete a photo from an Alert
      parameters:
        - $ref: '#/components/parameters/AlertId'
        - name: s3ObjectKey
          in: path
          schema:
            type: string
          required: true
      responses:
        '204':
          description: Alert deleted
  /alerts/{id}/posts:
    post:
      operationId: addPostToAlert
      tags:
        - Alerts
      parameters:
        - $ref: '#/components/parameters/AlertId'
      summary: Add a post to an alert
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                photoFilenames:
                  $ref: '#/components/schemas/Post'
      responses:
        '201':
          description: Photos added
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PhotoUrl'
components:
  schemas:
    Alert:
      type: object
      example:
        username: "hannah-bannanah"
        type: SEEN
        chipNumber: "9999342343214322"
        status: ACTIVE
        sex: UNKNOWN
        date: "2025-04-17T16:40:27.914Z"
        title: "Found a cutie pie"
        description: "Seen at the beach, swimming"
        breed: "mixed"
        postalCode: "04001"
        countryCode: ES
        location: "üìç -33.4305, -70.5896"
        latitude: -33.4305
        longitude: -70.5896
        locationSource: GPS
      properties:
        id:
          type: integer
          readOnly: true
        username:
          type: string
        type:
          type: string
          enum: [ LOST, SEEN ]
        status:
          type: string
          enum: [ ACTIVE, RESOLVED ]
        chipNumber:
          type: string
          description: Chip number of the pet
        sex:
          type: string
          enum: [ MALE, FEMALE, UNKNOWN ]
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
        date:
          type: string
          format: date-time
        description:
          type: string
        breed:
          type: string
        postalCode:
          type: string
        countryCode:
          type: string
        location:
          type: string
          description: Human-readable location string (e.g., "üìç -33.4305, -70.5896")
        latitude:
          type: number
          format: double
          minimum: -90
          maximum: 90
          description: GPS latitude coordinate
        longitude:
          type: number
          format: double
          minimum: -180
          maximum: 180
          description: GPS longitude coordinate
        locationSource:
          type: string
          enum: [GPS, MANUAL]
          description: Source of the location data
      required:
        - user
        - type
        - date
        - postalCode
        - countryCode
        - title
    CreateAlertRequest:
      example:
        username: "hannah-bannanah"
        type: SEEN
        chipNumber: "9999342343214322"
        status: ACTIVE
        sex: UNKNOWN
        date: "2025-04-17T16:40:27.914Z"
        title: "Found a cutie pie"
        description: "Seen at the beach, swimming"
        breed: "mixed"
        postalCode: "04001"
        countryCode: ES
        photoFilenames: ["photo1.png"]
      allOf:
        - $ref: '#/components/schemas/Alert'
        - $ref: '#/components/schemas/PhotoFileNames'
    CreateAlertResponse:
      example:
        username: "hannah-bannanah"
        type: SEEN
        chipNumber: "9999342343214322"
        status: ACTIVE
        sex: UNKNOWN
        date: "2025-04-17T16:40:27.914Z"
        title: "Found a cutie pie"
        description: "Seen at the beach, swimming"
        breed: "mixed"
        postalCode: "04001"
        countryCode: ES
        photoUrls: ["https:s3.region.aws.com/bucket/photo1__abc123.png"]
      allOf:
        - $ref: '#/components/schemas/Alert'
        - type: object
          properties:
            photoUrls:
              type: array
              items:
                $ref: '#/components/schemas/PhotoUrl'
    Photo:
      type: object
      properties:
        id:
          type: integer
          readonly: true
        alertId:
          type: integer
          readonly: true
        s3objectKey:
          type: string
      required:
        - s3objectKey
    PhotoUrl:
      type: object
      properties:
        s3ObjectKey:
          type: string
          example: "originalFilename__abc123.jpg"
        presignedUrl:
          type: string
          format: uri
          example: "https:s3.region.aws.com/bucket/photo1__abc123.png"
      required:
        - s3ObjectKey
        - presignedUrl
    PhotoFileNames:
      type: array
      example: [ "image.jpg" ]
      items:
        type: string
    
    AlertResponse:
      allOf:
        - $ref: '#/components/schemas/Alert'
        - type: object
          properties:
            photoUrls:
              type: array
              items:
                $ref: '#/components/schemas/PhotoUrl'
    
    Post:
      type: object
      example:
        userId: 0
        title: "Seen similar dog in Town Square"
        content: "I saw a very similar dog yesterday, and again today. Can I try to approach him and bring him home?"
      properties:
        userId:
          type: integer
        alertId:
          type: integer
          readonly: true
        title:
          type: string
        content:
          type: text
        createdAt:
          type: date-time
          readonly: true
      required:
        - userId
        - title
        - content
  parameters:
    AlertId:
      name: id
      in: path
      required: true
      schema:
        type: integer