paths:
  /users:
    get:
      operationId: listUsers
      tags:
        - Users
      summary: List all users
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      operationId: createUser
      tags:
        - Users
      summary: Create a new user
      security: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /users/{id}:
    get:
      operationId: getUserById
      tags:
        - Users
      summary: Get a user by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    put:
      operationId: updateUser
      tags:
        - Users
      summary: Update a user
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    delete:
      operationId: deleteUser
      tags:
        - Users
      summary: Delete a user
      responses:
        '204':
          description: User deleted
    patch:
      operationId: updateProfile
      tags:
        - User Profile
      summary: Update user profile
      description: Allows authenticated users to update their own profile information. Admins can update any user profile.
      security:
        - basicAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProfileRequest'
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid input data or email already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Validation Error"
                  message:
                    type: string
                    example: "Email already exists"
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Unauthorized"
                  message:
                    type: string
                    example: "Invalid credentials"
        '403':
          description: You can only update your own profile
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Forbidden"
                  message:
                    type: string
                    example: "You can only update your own profile"
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Not Found"
                  message:
                    type: string
                    example: "User not found"
  /users/username/{username}:
    get:
      operationId: getUserByUsername
      tags:
        - Users
      summary: Get a user by username
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
components:
  schemas:
    User:
      type: object
      example:
        id: 1
        username: "hannah_bannanah"
        email: "hannah@bannanah.com"
        subscriptionEmail: "bannanah@notifications.com"
        phoneNumber: "+34123456789"
        role: "USER"
        createdAt: "2024-03-15T14:30:00Z"
      properties:
        id:
          type: integer
          readOnly: true
        username:
          type: string
          maxLength: 50
        password:
          type: string
          writeOnly: true
        email:
          type: string
          format: email
          maxLength: 100
        subscriptionEmail:
          type: string
          format: email
          maxLength: 100
        phoneNumber:
          type: string
          maxLength: 20
        role:
          type: string
          enum: [ ADMIN, USER ]
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
      required:
        - username
        - email
        - role
    CreateUserRequest:
      example:
        id: 1
        username: "hannah_bannanah"
        email: "hannah@bannanah.com"
        password: "password101"
        subscriptionEmail: "bannanah@notifications.com"
        phoneNumber: "+34123456789"
        role: "USER"
      allOf:
        - $ref: '#/components/schemas/User'
        - password:
            type: string
      required:
        - username
        - email
        - password
    UpdateProfileRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          description: User's email address (must be unique)
          maxLength: 100
          example: "user@example.com"
        subscriptionEmail:
          type: string
          format: email
          description: Email address for receiving notifications
          maxLength: 100
          example: "user@example.com"
        phoneNumber:
          type: string
          description: User's phone number (can include country code)
          maxLength: 20
          pattern: '^[+]?[0-9\s\-()]{0,20}$'
          example: "+1234567890"
      description: Request body for updating user profile information. All fields are optional.